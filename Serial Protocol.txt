This is a short explaination of the serial protocol used for the ATX extension.

Baud Rate: 115200
Logic Levels: 3.3V

You HAVE to use some resistors for any data coming from a 5V system to the KVM, or it could destroy the chip used for the serial communication, probably the main IC.
A logic level shifter for both data lines (TX and RX) is recommended to convert real 3.3V logic to 5V logic, but I discovered that 3.3V levels work fine on the RX pin of an ATmega328.

The KVM has a web interface where you can push the power and reset button and view the state of the power and HDD LED. After you release the button in the browser, the KVM will send out an ON command and a few milliseconds later an OFF command.
So you can't use a too slow chip on the other end or code that has a lot of delays.

When I analysed the protocol, I didn't find a way to trigger a long power button press to force a shutdown and it was always around 50ms.
The user u/techlobo discovered, that there are values for a long and short press in the JetKVMs source code, so there may be an option to do this (See Issue #1).

As for the LED side, the extension board will send a row of numbers back to the KVM after anything changed.
That means it creates a response if any LED changes its state or if it pressed a button.

Commands from KVM to extension:
Push power button:	BTN_PWR_ON<LF>
Release power button:	BTN_PWR_OFF<LF>
Push reset button:	BTN_RST_ON<LF>
Release reset button:	BTN_RST_OFF<LF>

The <LF> stands for line feed and is what my serial debugger interpreted the signal as. It can be send by an Arduino using \n as seen in my code.

Responses from extension to KVM:
ABCD<LF>

A	1 if HDD LED off		0 if HDD LED on
B	1 if PWR LED off		0 if PWR LED on
C	0 if RST button open	1 if RST button closed
D	0 if PWR button open	1 if PWR button closed

The default state (not connect to anything) is 1100. Again this response is followed by an <LF> to detect the end of the command.
The extension has no way to detect the actual state of the buttons, so every response regarding the buttons is coming straight from the software.

As you can see it's a very simple but functioning protocol that's easy to implement.

With a bit of modification to the web interface, you could control how long the button is pressed, but there is no way to configurate this at the moment, even if it would be supported by the hardware and protocol.
